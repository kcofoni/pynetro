#!/usr/bin/env python3
"""Script pour g√©n√©rer les fichiers de r√©f√©rence JSON des r√©ponses API Netro.

Usage:
    python tests/generate_references.py

Ou depuis un autre script:
    from tests.generate_references import generate_all_references
    await generate_all_references()
"""

import asyncio
import json
import os
from pathlib import Path

from pynetro.client import NetroClient, NetroConfig

from .aiohttp_client import AiohttpClient

# Variables d'environnement pour les num√©ros de s√©rie
NETRO_SENS_SERIAL = os.getenv("NETRO_SENS_SERIAL")
NETRO_CTRL_SERIAL = os.getenv("NETRO_CTRL_SERIAL")


async def generate_all_references() -> None:
    """G√©n√®re tous les fichiers de r√©f√©rence JSON."""
    # V√©rifier que les variables d'environnement sont d√©finies
    if not NETRO_SENS_SERIAL or not NETRO_CTRL_SERIAL:
        print("‚ùå Variables d'environnement manquantes:")
        print("   NETRO_SENS_SERIAL et NETRO_CTRL_SERIAL doivent √™tre d√©finies")
        print("   Exemple: export NETRO_SENS_SERIAL='votre_serial_sensor'")
        print("   Exemple: export NETRO_CTRL_SERIAL='votre_serial_controller'")
        return

    reference_dir = Path(__file__).parent / "reference_data"
    reference_dir.mkdir(exist_ok=True)

    async with AiohttpClient() as http:
        client = NetroClient(http, NetroConfig())

        print("üì° G√©n√©ration des r√©f√©rences API Netro...")

        # G√©n√©rer r√©f√©rence sensor
        print("  üîã R√©cup√©ration donn√©es sensor...")
        sensor_result = await client.get_info(NETRO_SENS_SERIAL)
        sensor_file = reference_dir / "sensor_response.json"
        with sensor_file.open("w") as f:
            json.dump(sensor_result, f, indent=2, default=str)
        print(f"  ‚úÖ Sensor: {sensor_file}")

        # G√©n√©rer r√©f√©rence controller
        print("  üéÆ R√©cup√©ration donn√©es controller...")
        controller_result = await client.get_info(NETRO_CTRL_SERIAL)
        controller_file = reference_dir / "controller_response.json"
        with controller_file.open("w") as f:
            json.dump(controller_result, f, indent=2, default=str)
        print(f"  ‚úÖ Controller: {controller_file}")

        print("\nüìä R√©sum√© des structures g√©n√©r√©es:")
        print(f"  Sensor data keys: {list(sensor_result['data'].keys())}")
        print(f"  Controller data keys: {list(controller_result['data'].keys())}")
        print(f"  Sensor fields: {list(sensor_result['data']['sensor'].keys())}")
        print(f"  Controller fields: {list(controller_result['data']['device'].keys())}")


def load_sensor_reference() -> dict:
    """Charge le fichier de r√©f√©rence sensor."""
    reference_file = Path(__file__).parent / "reference_data" / "sensor_response.json"
    with reference_file.open() as f:
        return json.load(f)


def load_controller_reference() -> dict:
    """Charge le fichier de r√©f√©rence controller."""
    reference_file = Path(__file__).parent / "reference_data" / "controller_response.json"
    with reference_file.open() as f:
        return json.load(f)


if __name__ == "__main__":
    asyncio.run(generate_all_references())
